/* tslint:disable */
/* eslint-disable */
/*
Cleemy Expenses

Welcome on the documentation for the CleemyExpenses API.


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Enum } from '../models';
// @ts-ignore
import { ExpenseReceipt } from '../models';
// @ts-ignore
import { ExpenseTempItem } from '../models';
// @ts-ignore
import { ExpenseTempItemAttendees } from '../models';
// @ts-ignore
import { ExpenseTempItemAuthorizedActions } from '../models';
// @ts-ignore
import { ExpenseTempItemCustomFieldsValue } from '../models';
// @ts-ignore
import { ExpenseTempItemMileage } from '../models';
// @ts-ignore
import { ExpenseTempItemOriginalTransaction } from '../models';
// @ts-ignore
import { ExpenseTempItemProcessedAmounts } from '../models';
// @ts-ignore
import { ExpensesCreateNewTemporaryExpenseResponse } from '../models';
// @ts-ignore
import { ExpensesGetByIdResponse } from '../models';
// @ts-ignore
import { ExpensesListTempItems400Response } from '../models';
// @ts-ignore
import { ExpensesListTempItemsResponse } from '../models';
// @ts-ignore
import { ExpensesUpdateExpenseTempItemResponse } from '../models';
// @ts-ignore
import { PaymentMethodId } from '../models';
// @ts-ignore
import { SourceId } from '../models';
// @ts-ignore
import { StatusId } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExpensesApi - axios parameter creator
 * @export
 */
export const ExpensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new temporary expense
         * @param {ExpenseTempItem} [expenseTempItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTemporaryExpense: async (expenseTempItem?: ExpenseTempItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/expenseTempItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseTempItem,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/expenseTempItems',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseTempItem, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an ExpenseTempItem by id
         * @param {number} expenseTempItemId Unique identifier of the ExpenseTempItem.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (expenseTempItemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseTempItemId' is not null or undefined
            assertParamExists('getById', 'expenseTempItemId', expenseTempItemId)
            const localVarPath = `/api/v3/expenseTempItems/{expenseTempItemId}`
                .replace(`{${"expenseTempItemId"}}`, encodeURIComponent(String(expenseTempItemId !== undefined ? expenseTempItemId : `-expenseTempItemId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/expenseTempItems/{expenseTempItemId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of `ExpenseTempItems`.  The `purchasedOn` query parameter can operate comparisons with a given date-time value: - `?purchasedOn=2021-01-01`: strict equality. - `?purchasedOn=since,2021-01-01`: greater than or equal. - `?purchasedOn=until,2021-01-01`: lower than or equal. - `?purchasedOn=between,2021-01-01,2021-01-31`: comprised between two dates.
         * @summary List ExpenseTempItems (temporary expense)
         * @param {string} paging {offset},{limit}. Defaults to 0,1000.
         * @param {Array<any>} [ownerId] Comma-separated list of user identifiers (int).
         * @param {string} [orderBy] {fieldName},{\&#39;asc\&#39;||\&#39;desc\&#39;}. Example: &#x60;?orderby&#x3D;purchasedOn,desc&#x60;
         * @param {string} [purchasedOn] Examples: &#x60;between,2022-01-01,202201-31&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTempItems: async (paging: string, ownerId?: Array<any>, orderBy?: string, purchasedOn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paging' is not null or undefined
            assertParamExists('listTempItems', 'paging', paging)
            const localVarPath = `/api/v3/expenseTempItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (ownerId) {
                localVarQueryParameter['ownerId'] = ownerId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (purchasedOn !== undefined) {
                localVarQueryParameter['purchasedOn'] = purchasedOn;
            }

            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/expenseTempItems',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an ExpenseTempItem by id
         * @param {number} expenseTempItemId Unique identifier of the ExpenseTempItem.
         * @param {ExpenseTempItem} [expenseTempItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpenseTempItem: async (expenseTempItemId: number, expenseTempItem?: ExpenseTempItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseTempItemId' is not null or undefined
            assertParamExists('updateExpenseTempItem', 'expenseTempItemId', expenseTempItemId)
            const localVarPath = `/api/v3/expenseTempItems/{expenseTempItemId}`
                .replace(`{${"expenseTempItemId"}}`, encodeURIComponent(String(expenseTempItemId !== undefined ? expenseTempItemId : `-expenseTempItemId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expenseTempItem,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/expenseTempItems/{expenseTempItemId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expenseTempItem, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpensesApi - functional programming interface
 * @export
 */
export const ExpensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpensesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new temporary expense
         * @param {ExpensesApiCreateNewTemporaryExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTemporaryExpense(requestParameters: ExpensesApiCreateNewTemporaryExpenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesCreateNewTemporaryExpenseResponse>> {
            const expenseTempItem: ExpenseTempItem = {
                id: requestParameters.id,
                purchasedOn: requestParameters.purchasedOn,
                originalTransaction: requestParameters.originalTransaction,
                processedAmounts: requestParameters.processedAmounts,
                expenseNatureId: requestParameters.expenseNatureId,
                mileage: requestParameters.mileage,
                quantity: requestParameters.quantity,
                effectiveQuantity: requestParameters.effectiveQuantity,
                attendees: requestParameters.attendees,
                axisSections: requestParameters.axisSections,
                customFields: requestParameters.customFields,
                merchant: requestParameters.merchant,
                comment: requestParameters.comment,
                expenseReceipts: requestParameters.expenseReceipts,
                authorizedActions: requestParameters.authorizedActions,
                sourceId: requestParameters.sourceId,
                source: requestParameters.source,
                ownerId: requestParameters.ownerId,
                paymentMethodId: requestParameters.paymentMethodId,
                paymentMethod: requestParameters.paymentMethod,
                statusId: requestParameters.statusId,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTemporaryExpense(expenseTempItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an ExpenseTempItem by id
         * @param {ExpensesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ExpensesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.expenseTempItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of `ExpenseTempItems`.  The `purchasedOn` query parameter can operate comparisons with a given date-time value: - `?purchasedOn=2021-01-01`: strict equality. - `?purchasedOn=since,2021-01-01`: greater than or equal. - `?purchasedOn=until,2021-01-01`: lower than or equal. - `?purchasedOn=between,2021-01-01,2021-01-31`: comprised between two dates.
         * @summary List ExpenseTempItems (temporary expense)
         * @param {ExpensesApiListTempItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTempItems(requestParameters: ExpensesApiListTempItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesListTempItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTempItems(requestParameters.paging, requestParameters.ownerId, requestParameters.orderBy, requestParameters.purchasedOn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an ExpenseTempItem by id
         * @param {ExpensesApiUpdateExpenseTempItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExpenseTempItem(requestParameters: ExpensesApiUpdateExpenseTempItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesUpdateExpenseTempItemResponse>> {
            const expenseTempItem: ExpenseTempItem = {
                id: requestParameters.id,
                purchasedOn: requestParameters.purchasedOn,
                originalTransaction: requestParameters.originalTransaction,
                processedAmounts: requestParameters.processedAmounts,
                expenseNatureId: requestParameters.expenseNatureId,
                mileage: requestParameters.mileage,
                quantity: requestParameters.quantity,
                effectiveQuantity: requestParameters.effectiveQuantity,
                attendees: requestParameters.attendees,
                axisSections: requestParameters.axisSections,
                customFields: requestParameters.customFields,
                merchant: requestParameters.merchant,
                comment: requestParameters.comment,
                expenseReceipts: requestParameters.expenseReceipts,
                authorizedActions: requestParameters.authorizedActions,
                sourceId: requestParameters.sourceId,
                source: requestParameters.source,
                ownerId: requestParameters.ownerId,
                paymentMethodId: requestParameters.paymentMethodId,
                paymentMethod: requestParameters.paymentMethod,
                statusId: requestParameters.statusId,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpenseTempItem(requestParameters.expenseTempItemId, expenseTempItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpensesApi - factory interface
 * @export
 */
export const ExpensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpensesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new temporary expense
         * @param {ExpensesApiCreateNewTemporaryExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTemporaryExpense(requestParameters: ExpensesApiCreateNewTemporaryExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<ExpensesCreateNewTemporaryExpenseResponse> {
            return localVarFp.createNewTemporaryExpense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an ExpenseTempItem by id
         * @param {ExpensesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ExpensesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ExpensesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of `ExpenseTempItems`.  The `purchasedOn` query parameter can operate comparisons with a given date-time value: - `?purchasedOn=2021-01-01`: strict equality. - `?purchasedOn=since,2021-01-01`: greater than or equal. - `?purchasedOn=until,2021-01-01`: lower than or equal. - `?purchasedOn=between,2021-01-01,2021-01-31`: comprised between two dates.
         * @summary List ExpenseTempItems (temporary expense)
         * @param {ExpensesApiListTempItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTempItems(requestParameters: ExpensesApiListTempItemsRequest, options?: AxiosRequestConfig): AxiosPromise<ExpensesListTempItemsResponse> {
            return localVarFp.listTempItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an ExpenseTempItem by id
         * @param {ExpensesApiUpdateExpenseTempItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpenseTempItem(requestParameters: ExpensesApiUpdateExpenseTempItemRequest, options?: AxiosRequestConfig): AxiosPromise<ExpensesUpdateExpenseTempItemResponse> {
            return localVarFp.updateExpenseTempItem(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewTemporaryExpense operation in ExpensesApi.
 * @export
 * @interface ExpensesApiCreateNewTemporaryExpenseRequest
 */
export type ExpensesApiCreateNewTemporaryExpenseRequest = {
    
} & ExpenseTempItem

/**
 * Request parameters for getById operation in ExpensesApi.
 * @export
 * @interface ExpensesApiGetByIdRequest
 */
export type ExpensesApiGetByIdRequest = {
    
    /**
    * Unique identifier of the ExpenseTempItem.
    * @type {number}
    * @memberof ExpensesApiGetById
    */
    readonly expenseTempItemId: number
    
}

/**
 * Request parameters for listTempItems operation in ExpensesApi.
 * @export
 * @interface ExpensesApiListTempItemsRequest
 */
export type ExpensesApiListTempItemsRequest = {
    
    /**
    * {offset},{limit}. Defaults to 0,1000.
    * @type {string}
    * @memberof ExpensesApiListTempItems
    */
    readonly paging: string
    
    /**
    * Comma-separated list of user identifiers (int).
    * @type {Array<any>}
    * @memberof ExpensesApiListTempItems
    */
    readonly ownerId?: Array<any>
    
    /**
    * {fieldName},{\'asc\'||\'desc\'}. Example: `?orderby=purchasedOn,desc`
    * @type {string}
    * @memberof ExpensesApiListTempItems
    */
    readonly orderBy?: string
    
    /**
    * Examples: `between,2022-01-01,202201-31`.
    * @type {string}
    * @memberof ExpensesApiListTempItems
    */
    readonly purchasedOn?: string
    
}

/**
 * Request parameters for updateExpenseTempItem operation in ExpensesApi.
 * @export
 * @interface ExpensesApiUpdateExpenseTempItemRequest
 */
export type ExpensesApiUpdateExpenseTempItemRequest = {
    
    /**
    * Unique identifier of the ExpenseTempItem.
    * @type {number}
    * @memberof ExpensesApiUpdateExpenseTempItem
    */
    readonly expenseTempItemId: number
    
} & ExpenseTempItem

/**
 * ExpensesApiGenerated - object-oriented interface
 * @export
 * @class ExpensesApiGenerated
 * @extends {BaseAPI}
 */
export class ExpensesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new temporary expense
     * @param {ExpensesApiCreateNewTemporaryExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public createNewTemporaryExpense(requestParameters: ExpensesApiCreateNewTemporaryExpenseRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).createNewTemporaryExpense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an ExpenseTempItem by id
     * @param {ExpensesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public getById(requestParameters: ExpensesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of `ExpenseTempItems`.  The `purchasedOn` query parameter can operate comparisons with a given date-time value: - `?purchasedOn=2021-01-01`: strict equality. - `?purchasedOn=since,2021-01-01`: greater than or equal. - `?purchasedOn=until,2021-01-01`: lower than or equal. - `?purchasedOn=between,2021-01-01,2021-01-31`: comprised between two dates.
     * @summary List ExpenseTempItems (temporary expense)
     * @param {ExpensesApiListTempItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public listTempItems(requestParameters: ExpensesApiListTempItemsRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).listTempItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an ExpenseTempItem by id
     * @param {ExpensesApiUpdateExpenseTempItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public updateExpenseTempItem(requestParameters: ExpensesApiUpdateExpenseTempItemRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).updateExpenseTempItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
